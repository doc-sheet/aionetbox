openapi: 3.0.1
info:
  title: Sample API
  description: API description in Markdown.
  version: 1.0.0
servers:
- url: https://api.example.com/v1
paths:
  /fake:
    get:
      tags:
      - fake
      summary: Fake request
      responses:
        "200":
          description: A User object.
          content:
            '*/*':
              schema:
                required:
                - fake
                type: object
                properties:
                  fake:
                    type: boolean
  /users:
    get:
      tags:
      - users
      summary: Return all users.
      operationId: users_list
      parameters:
      - name: name
        in: query
        description: name to lookup
        schema:
          type: string
      - name: limit
        in: query
        description: maximum records
        schema:
          type: integer
      - name: offset
        in: query
        description: starting record
        schema:
          type: integer
      responses:
        "200":
          description: A User object.
          content:
            '*/*':
              schema:
                required:
                - count
                - data
                type: object
                properties:
                  count:
                    type: integer
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
    post:
      tags:
      - users
      summary: Create a user
      operationId: users_create
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: false
      responses:
        "200":
          description: OK
          content: {}
      x-codegen-request-body-name: data
  /users/{userId}:
    get:
      tags:
      - users
      summary: Returns a user by ID.
      operationId: users_read
      parameters:
      - name: userId
        in: path
        description: The ID of the user to return.
        required: true
        schema:
          minimum: 1
          type: integer
      responses:
        "200":
          description: A User object.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: The specified user ID is invalid (e.g. not a number).
          content: {}
        "404":
          description: A user with the specified ID was not found.
          content: {}
        default:
          description: Unexpected error
          content: {}
    delete:
      tags:
      - users
      summary: Delete a user by ID.
      operationId: users_delete
      parameters:
      - name: userId
        in: path
        description: The ID of the user to return.
        required: true
        schema:
          minimum: 1
          type: integer
      responses:
        "204":
          description: Success.
          content: {}
        "400":
          description: The specified user ID is invalid (e.g. not a number).
          content: {}
        "404":
          description: A user with the specified ID was not found.
          content: {}
        default:
          description: Unexpected error
          content: {}
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 4
        name:
          type: string
          example: Arthur Dent
        address:
          type: object
          properties:
            number:
              type: integer
            street:
              type: string
        cars:
          type: array
          items:
            $ref: '#/components/schemas/Car'
    Car:
      required:
      - make
      - model
      type: object
      properties:
        make:
          type: string
        model:
          type: string
        year:
          type: integer
        problems:
          type: array
          items:
            type: string
x-original-swagger-version: "2.0"

